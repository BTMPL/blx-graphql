directive @auth(requires: Role = USER) on OBJECT | FIELD_DEFINITION

enum Role {
  USER
  UNKNOWN
}

"""Date custom scalar type"""
scalar Date

enum CustomerDepositAccountStatus {
  ACTIVE
  INACTIVE
}

enum CustomerStatusValue {
  NOT_INITIATED
  INITIATED
  PASSED
  FAILED
}

enum CustomerOverallStatus {
  ONBOARDED
  ACTIVE
  FAILED
  PROSPECT
  ARCHIVED
  OFFBOARDING_PENDING
  OFFBOARDED
}

enum CustomerAccountStatus {
  INITIATED
  INITIALISATION_FAILURE
  INACTIVE
  ACTIVE
  DORMANT
  BLOCKED
  PENDING_CLOSURE
  CLOSED
}

enum AddressEnum {
  RESIDENTIAL
  MAILING
}

enum EmploymentType {
  EMPLOYER
  GOVERNMENT_EMPLOYEE
  PRIVATE_EMPLOYEE
  SELF_EMPLOYED
  UNPAID_FAMILY_WORKER
  HOUSEWIFE_HOUSEHUSBAND
  RETIREE
  STUDENT
  UNEMPLOYED
  OTHER_OUTSIDE_LABOUR_FORCE
  REPORTING_ENTITY_EMPLOYEE
}

enum AnnualIncomeBracket {
  LESS_THAN_RM12000
  RM12000_RM17999
  RM18000_RM23999
  RM24000_RM35999
  RM36000_RM47999
  RM48000_RM71999
  RM72000_RM95999
  RM96000_RM119999
  RM120000_AND_ABOVE
}

enum OtpValidationStatus {
  FAILED
  APPROVED
  APPROVED_ALREADY_EXISTS
}

enum LoginContext {
  RETAIL
  SME
}

enum Occupation {
  ACCOUNTANTS
  ADMINISTRATION_PROFESSIONALS
  ADMINISTRATIVE_AND_COMMERCIAL_MANAGERS
  ARMED_FORCES_OCCUPATIONS
  BUSINESS_AND_ADMINISTRATIONS_ASSOCIATE_PROFESSIONALS
  CLERICAL_SUPPORT_WORKERS
  CRAFT_AND_RELATED_TRADES_WORKERS
  DENTISTS
  ELEMENTARY_OCCUPATIONS
  FINANCIAL_ANALYSTS
  FINANCIAL_AND_INVESTMENT_ADVISERS
  HEALTH_ASSOCIATE_PROFESSIONALS
  HEALTH_PROFESSIONALS_NOT_ELSEWHERE_CLASSIFIED
  HOSPITALITY_AND_RELATED_SERVICES_PROFESSIONALS
  HOSPITALITY_RETAIL_AND_OTHER_SERVICES_MANAGERS
  HOUSEWIFE_HOUSEHUSBAND
  INFORMATION_AND_COMMUNICATIONS_TECHNICIANS
  INFORMATION_AND_COMMUNICATIONS_TECHNOLOGY_MANAGERS
  INFORMATION_AND_COMMUNICATIONS_TECHNOLOGY_PROFESSIONALS
  INSURANCE_AGENT
  JEWELLERY_AND_PRECIOUS_METAL_WORKERS
  JUDGES
  LAWYERS
  LEGAL_ASSOCIATE_PROFESSIONALS
  LEGAL_PROFESSIONALS_NEC
  LEGISLATORS_AND_SENIOR_OFFICIALS
  MANAGING_DIRECTORS_AND_CHIEF_EXECUTIVES
  MEDICAL_DOCTORS
  NURSING_AND_MIDWIFERY_PROFESSIONALS
  OPTOMETRISTS_AND_OPHTHALMIC_OPTICIANS
  OTHER_OUTSIDE_LABOUR_FORCE
  PAWNBROKERS_AND_MONEY_LENDERS
  PHARMACISTS
  PLANT_AND_MACHINE_OPERATORS_AND_ASSEMBLERS
  PRODUCTION_AND_MANUFACTURING_MANAGERS
  REGULATORY_GOVERNMENT_ASSOCIATE_PROFESSIONALS
  REGULATORY_GOVERNMENT_PROFESSIONALS
  RELIGIOUS_PROFESSIONALS
  RETIREE
  SALES_MARKETING_AND_PUBLIC_RELATIONS_PROFESSIONALS
  SCIENCE_AND_ENGINEERING_ASSOCIATE_PROFESSIONALS
  SCIENCE_AND_ENGINEERING_PROFESSIONALS
  SERVICE_AND_SALES_WORKERS
  SERVICES_MANAGERS
  SKILLED_AGRICULTURAL_FORESTRY_LIVESTOCK_AND_FISHERY_WORKERS
  SOCIAL_AND_CULTURAL_PROFESSIONALS
  SOCIAL_CULTURAL_AND_RELATED_ASSOCIATE_PROFESSIONALS
  STALL_AND_MARKET_SALESPERSONS
  STREET_FOOD_SALESPERSONS
  STUDENT
  TEACHING_PROFESSIONALS
}

enum EmploymentSector {
  AGRICULTURE_FORESTRY_AND_FISHING
  MINING_AND_QUARRYING
  MANUFACTURING
  ELECTRICITY_GAS_STEAM_AND_AIR_CONDITIONING_SUPPLY
  WATER_SUPPLY_SEWERAGE_WASTE_MANAGEMENT_AND_REMEDIATION_ACTIVITIES
  CONSTRUCTION
  WHOLESALE_AND_RETAIL_TRADE_REPAIR_OF_MOTOR_VEHICLES_AND_MOTORCYCLES
  TRANSPORTATION_AND_STORAGE
  ACCOMMODATION_AND_FOOD_SERVICE_ACTIVITIES
  INFORMATION_AND_COMMUNICATION
  FINANCIAL_AND_INSURANCE_TAKAFUL_ACTIVITIES
  REAL_ESTATE_ACTIVITIES
  PROFESSIONAL_SCIENTIFIC_AND_TECHNICAL_ACTIVITIES
  ADMINISTRATIVE_AND_SUPPORT_SERVICE_ACTIVITIES
  PUBLIC_ADMINISTRATION_AND_DEFENCE_COMPULSORY_SOCIAL_SECURITY
  EDUCATION
  HUMAN_HEALTH_AND_SOCIAL_WORK_ACTIVITIES
  ARTS_ENTERTAINMENT_AND_RECREATION
  OTHER_SERVICE_ACTIVITIES
  ACTIVITIES_OF_HOUSE
  ACTIVITIES_OF_EXTRATERRITORIAL_ORGANISATIONS_AND_BODIES
  NOT_APPLICABLE
}

type Query {
  checkUsernameUniqueness(username: String!): CheckUsernameUniquenessResponse
  depositAccount: [DepositAccount]
  documents: [Document!]
}

type Mutation {
  createInitialCustomer(customerMobileInput: CustomerMobileDeviceInput!): CreateCustomerResponse!
  createIamAccount(iamAccountInput: CreateIamAccountInput!): CreateIamAccountResponse!
  storePersonalDetails(personalDetailsInput: PersonalDetailsInput!): PersonalDetailsResponse!
  validateOtp(otpValidationInput: OtpValidationInput!): OtpValidationResponse!
  loginInitialize(input: InitializeLoginInput!): InitializeLoginResponse!
  refreshTokens(refreshToken: String!): RefreshTokensResponse! @auth(requires: USER)
  loginComplete(input: LoginCompleteInput!): LoginCompleteResponse!
  logoutUser: LogoutUserResponse!
}

input CreateIamAccountInput {
  customerId: String!
  email: String
  username: String
  password: String
  secureword: String
  phoneNumber: String
}

input PersonalDetailsInput {
  customerId: String!
  mobilePreferences: MobilePreferencesInput!
  employment: SaveEmploymentDataInput!
  profiles: ProfilesInput!
  acceptedDocuments: [DocumentIdInput!]!
  mailingAddress: AddressInput
  mailingAddressSameAsResidence: Boolean!
  email: String
  nickname: String
}

input MobilePreferencesInput {
  pushNotificationsAllowed: Boolean
  marketingEmailFlag: Boolean
  marketingPhoneCallFlag: Boolean
  marketingSmsFlag: Boolean
  marketingPushFlag: Boolean
}

input SaveEmploymentDataInput {
  employer: String
  employmentType: EmploymentType!
  employmentSector: EmploymentSector
  occupation: Occupation
  annualIncomeBracket: AnnualIncomeBracket
}

input ProfilesInput {
  maritalStatus: String
  ethnicity: String
  accountSettingUpReasons: [String!]
}

input DocumentIdInput {
  documentId: Int!
}

input AddressInput {
  line1: String
  line2: String
  line3: String
  line4: String
  line5: String
  countryCode: String!
  city: String!
  postalCode: String!
  subdivision: String!
  type: AddressEnum!
}

input OtpValidationInput {
  customerId: String!
  phoneNumber: String!
  otp: String!
  deviceInstallationId: String!
}

input CustomerMobileDeviceInput {
  phoneNumber: String!
  deviceOs: String!
  deviceModel: String!
  deviceInstallationId: String
}

input InitializeLoginInput {
  username: String!
  password: String!
  pingOneMobilePayload: String!
  deviceMetadata: DeviceMetadataInput
  pingOneInfo: String
}

input DeviceMetadataInput {
  deviceOs: String!
  deviceModel: String!
}

input LoginCompleteInput {
  flowId: String!
  otp: String!
}

type PersonalDetailsResponse {
  customer: CustomerDetailsResponse
  requestId: String
}

type CreateCustomerResponse {
  customerId: String @deprecated(reason: "Use customerId available in `customer` objectt")
  customer: CustomerDetailsResponse
}

type CustomerStatuses {
  eligibility: CustomerStatusValue!
  identityVerifiaction: CustomerStatusValue!
  crr: CustomerStatusValue!
  cbs: CustomerStatusValue!
  depositAccounts: CustomerDepositAccountStatus!
  overall: CustomerOverallStatus!
}

type CustomerMobilePreferences {
  marketingChannels: CustomerMobilePreferencesMarketingChannels!
}

type CustomerMobilePreferencesMarketingChannels {
  email: Boolean!
  sms: Boolean!
  phoneCall: Boolean!
}

type Device {
  deviceId: String
  createdAt: Date
  updatedAt: Date
  deviceOs: String
  deviceModel: String
  deviceInstallationId: String
  deviceStatus: String
  phoneNumber: String @deprecated(reason: "Field is no longer available.")
}

type Account {
  accountId: String!
  accountNumber: String!
  status: CustomerAccountStatus!
}

type CustomerEmploymentDataResponseNew {
  id: ID
  employer: String
  employmentType: ValuesEmployment!
  employmentSector: String
  occupation: String
  annualIncome: Values
  employerName: String @deprecated(reason: "Use employer field.")
}

type Values {
  code: String
  name: String
}

type ValuesEmployment {
  code: String
  name: String
  requiresAllEmploymentDetails: Boolean
}

type Employment {
  employmentType: String
  employerName: String
  occupation: Occupation
  employmentSector: EmploymentSector
  annualIncomeBracket: String
}

type Profiles {
  maritalStatus: String
  ethnicity: String
  accountSettingUpReasons: [String]
  bnmCcc: String
  residencyStatus: String
  entityType: Int
  religion: String
  email: String @deprecated(reason: "Field is no longer available.")
  employment: Employment @deprecated(reason: "Field is no longer available.")
  reasonsForSettingUpTheAccount: [String!] @deprecated(reason: "Use accountSettingUpReasons field.")
}

type AcceptedDocument {
  acceptedDocumentId: ID
  acceptedDocumentString: String @deprecated(reason: "Field is no longer available.")
  acceptedDocumentDate: Date
  document: Document
}

type CustomerDetailsResponse {
  id: ID
  createdAt: Date
  updatedAt: Date
  firstName: String
  lastName: String
  nickname: String
  phoneNumber: String
  email: String
  nric: String
  username: String @deprecated(reason: "Field is no longer available.")
  status: String @deprecated(reason: "Field is no longer available.")
  statuses: CustomerStatuses
  type: String
  mobilePreferences: MobilePreferences
  devices: [Device!]
  accounts: [Account!]
  employments: [CustomerEmploymentDataResponse!]
  profiles: Profiles
  acceptedDocuments: [AcceptedDocument!]
  dateOfBirth: String
  placeOfBirth: String
  gender: String
  nationality: String
  hasRetailAccount: Boolean
  hasSmeAccount: Boolean
  mailingAddressSameAsResidence: Boolean
  addresses: [Address!]
  iam: Iam
  identityVerifications: [IdentityVerificationsResponse!]
}

type CustomerDetailsResponseNew {
  id: ID
  createdAt: Date
  updatedAt: Date
  firstName: String
  lastName: String
  nickname: String
  phoneNumber: String
  email: String
  nric: String
  username: String @deprecated(reason: "Field is no longer available.")
  status: String @deprecated(reason: "Field is no longer available.")
  statuses: CustomerStatuses
  type: String
  mobilePreferences: MobilePreferences
  devices: [Device!]
  accounts: [Account!]
  employments: [CustomerEmploymentDataResponseNew!]
  profiles: Profiles
  acceptedDocuments: [AcceptedDocument!]
  dateOfBirth: String
  placeOfBirth: String
  gender: String
  nationality: String
  hasRetailAccount: Boolean
  hasSmeAccount: Boolean
  mailingAddressSameAsResidence: Boolean
  addresses: [Address!]
  iam: Iam
  identityVerifications: [IdentityVerificationsResponse!]
}

type IdentityVerificationsResponse {
  identityReferenceId: String!
  startVerificationDate: Date!
  status: String!
  documentType: String
  documentSubtype: String
  documentCountry: String
}

type Iam {
  username: String
  pingOneId: String
  secureWord: String @deprecated(reason: "Field is no longer available.")
}

type Address {
  id: ID
  line1: String
  line2: String
  line3: String
  line4: String
  line5: String
  countryCode: String!
  city: String!
  postalCode: String!
  subdivision: String!
  type: AddressEnum!
}

type GetCustomerDetailsResponse {
  customer: CustomerDetailsResponseNew
}

type MobilePreferences {
  pushNotificationsAllowed: Boolean
  marketingEmailFlag: Boolean
  marketingPhoneCallFlag: Boolean
  marketingSmsFlag: Boolean
  marketingPushFlag: Boolean
}

type CustomerEmploymentDataResponse {
  id: ID
  employer: String
  employmentType: String!
  employmentSector: String
  occupation: String
  annualIncomeBracket: String
  employerName: String @deprecated(reason: "Use employer field.")
}

type CreateIamAccountResponse {
  pingoneUserId: String
  requestId: String
}

type OtpValidationResponse {
  status: OtpValidationStatus
  requestId: String
}

type CheckUsernameUniquenessResponse {
  usernameIsUnique: Boolean
}

type InitializeLoginResponse {
  flowId: String!
  expiresAt: Date
}

type RefreshTokensResponse {
  authTokenInfo: AuthTokenInfo
}

type AuthTokenInfo {
  accessToken: String!
  refreshToken: String!
  ttl: Int!
  idToken: String!
  context: LoginContext
}

type LoginCompleteResponse {
  accessToken: String!
  refreshToken: String!
  ttl: Int!
  idToken: String!
  notificationToken: String!
  usernameToken: String!
  context: LoginContext!
}

type LogoutUserResponse {
  message: String!
  success: Boolean!
}

type DepositAccount {
  id: ID!
  name: String!
  balance: Float!
}

type Document {
  id: ID
  url: String
  title: String
  version: Int
  type: String
}

schema {
  query: Query
  mutation: Mutation
}