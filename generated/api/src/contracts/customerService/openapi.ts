/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/customers/{customerId}": {
    /** Get customer data */
    get: operations["getCustomer"];
    /** Edit customers data */
    patch: operations["editCustomersParameters"];
  };
  "/v1/customers": {
    /** Get customers data. At least one query parameter is required. */
    get: operations["getCustomers"];
    /** Creates customer */
    post: operations["createCustomer"];
  };
  "/v1/customers/{customerId}/mobile-preferences": {
    /** Get customer mobile preferences */
    get: operations["getCustomerMobilePrefs"];
    /** Add mobile preferences to existing user */
    patch: operations["saveMobilePreferences"];
  };
  "/v1/customers/{customerId}/employments": {
    /** Get customer employments */
    get: operations["getCustomerEmployments"];
    /** Add employment data to existing user */
    post: operations["saveEmploymentData"];
  };
  "/v1/customers/{customerId}/identity-verifications": {
    /** Assign new identity verification to customer */
    post: operations["createIdentityVerification"];
  };
  "/v1/customers/{customerId}/profiles": {
    /** Get customer's profiles */
    get: operations["getCustomerProfiles"];
    /** Add profiles to existing user */
    patch: operations["saveProfiles"];
  };
  "/v1/customers/{customerId}/status": {
    /** Get status for existing customer */
    get: operations["getStatuses"];
  };
  "/v1/customers/{customerId}/accepted-documents": {
    /** Accept customer's documents */
    post: operations["createAcceptedDocuments"];
  };
  "/v1/customers/{customerId}/devices": {
    /** Get customer's devices */
    get: operations["getCustomerDevices"];
    /** Create new device for customer */
    post: operations["createDevice"];
  };
  "/v1/customers/{customerId}/framl-data": {
    /** Get customer data */
    get: operations["getCustomerFramlData"];
  };
  "/v1/customers/{customerId}/addresses": {
    /** Get customer addresses */
    get: operations["getCustomerAddresses"];
    /** Update mailing address data to existing user */
    patch: operations["changeMailingAddress"];
  };
  "/v1/customers/{customerId}/accounts": {
    /** Get customer accounts */
    get: operations["getCustomerAccounts"];
    /** Add account data to existing user */
    post: operations["saveAccount"];
  };
  "/v1/customers/{customerId}/financing-data": {
    /** Get financing-data of customer with customerId */
    get: operations["getCustomerFinancingData"];
  };
  "/v1/customers/snapshot": {
    /** Send snapshots */
    post: operations["sendSnapshots"];
  };
  "/v2/smes/{smesId}": {
    /** Get smes */
    get: operations["getSmeById"];
    /** Create smes */
    put: operations["updateSme"];
  };
  "/v2/smes/{smesId}/employees/{customerId}/roles/{role-name}": {
    /** Add role for smecustomer */
    post: operations["addRoleToSmeCustomer"];
    /** Delete role for smecustomer */
    delete: operations["deleteRoleToSmeCustomer"];
  };
  "/v2/smes/{smesId}/employees/{customerId}/roles": {
    /** Get role for smecustomer */
    get: operations["getRoleForSmeCustomer"];
  };
  "/v2/smes/{smesId}/employees": {
    /** Links customer and sme */
    post: operations["createEmployeeSme"];
  };
  "/v2/smes": {
    /** Create smes */
    get: operations["getSme"];
    /** Create smes */
    post: operations["createSme"];
  };
  "/v2/customers": {
    /** Create customer in SME */
    post: operations["createCustomerForSme"];
  };
  "/v2/smes/{smesId}/profiles": {
    /** Add profile to existing sme */
    patch: operations["saveSmeProfiles"];
  };
  "/v2/smes/{smesId}/addresses": {
    /** Add address to existing sme */
    post: operations["createSmeAddresses"];
    /** Update sme address of existing sme */
    patch: operations["upadeSmeAddress"];
  };
}

export interface components {}

export interface operations {
  /** Get customer data */
  getCustomer: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerDetailsRs"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Edit customers data */
  editCustomersParameters: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** Updated */
      200: unknown;
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["CustomerUpdateRequest"];
      };
    };
  };
  /** Get customers data. At least one query parameter is required. */
  getCustomers: {
    parameters: {
      query: {
        /** Customer's phone number */
        phoneNumber?: string;
        /** Customer's NRIC */
        nric?: string;
        /** Customer's username */
        username?: string;
        /** Customer's email */
        email?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomersDetailsRs"];
        };
      };
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
    };
  };
  /** Creates customer */
  createCustomer: {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json;version=1": external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerCreatedRs"];
        };
      };
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      409: external["schemas/generic/errors.yaml"]["components"]["responses"]["AccountAlreadyExistExceptionEntity"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Data of the customer to be created */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["CreateCustomerRequest"];
      };
    };
  };
  /** Get customer mobile preferences */
  getCustomerMobilePrefs: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["MobilePreferences"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Add mobile preferences to existing user */
  saveMobilePreferences: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** Updated */
      200: unknown;
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Data of the mobile preferences */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["CustomerMobilePreferencesRequest"];
      };
    };
  };
  /** Get customer employments */
  getCustomerEmployments: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerEmploymentDataResponse"][];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Add employment data to existing user */
  saveEmploymentData: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** Created */
      201: unknown;
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Employment data */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["CustomerEmploymentDataRequest"];
      };
    };
  };
  /** Assign new identity verification to customer */
  createIdentityVerification: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Not Found */
      404: unknown;
    };
    /** Data of the customer to be created */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["IdentityVerificationRequest"];
      };
    };
  };
  /** Get customer's profiles */
  getCustomerProfiles: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Profiles"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Add profiles to existing user */
  saveProfiles: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** Updated */
      200: unknown;
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Data of profiles */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["CustomerProfilesRequest"];
      };
    };
  };
  /** Get status for existing customer */
  getStatuses: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerStatuses"];
        };
      };
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /** Accept customer's documents */
  createAcceptedDocuments: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
      header: {
        /** Unique parameter to satisfy idempotency */
        "X-Request-ID": string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: unknown;
      /** Not Found */
      404: unknown;
    };
    /** Documents acceptances of the customer to be created */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["AcceptedDocumentsRequest"];
      };
    };
  };
  /** Get customer's devices */
  getCustomerDevices: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
      query: {
        /** Devices expected status */
        status?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["DevicesResponse"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Create new device for customer */
  createDevice: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
      header: {
        /** Unique parameter to satisfy idempotency */
        "X-Request-ID": string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Not Found */
      404: unknown;
    };
    /** Data of the customer's device to be created */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["DeviceRequest"];
      };
    };
  };
  /** Get customer data */
  getCustomerFramlData: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerFramlDetailsRs"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Get customer addresses */
  getCustomerAddresses: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Address"][];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Update mailing address data to existing user */
  changeMailingAddress: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** Created */
      201: unknown;
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Mailing address body */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["MailingAddressRequest"];
      };
    };
  };
  /** Get customer accounts */
  getCustomerAccounts: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Account"][];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Add account data to existing user */
  saveAccount: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** Created */
      201: unknown;
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Account data */
    requestBody: {
      content: {
        "application/json": external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Account"];
      };
    };
  };
  /** Get financing-data of customer with customerId */
  getCustomerFinancingData: {
    parameters: {
      path: {
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerFinancingDataResponse"];
        };
      };
      /** Customer not found */
      404: unknown;
    };
  };
  /** Send snapshots */
  sendSnapshots: {
    responses: {
      /** Sended */
      200: unknown;
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Issued customers */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["ManualSnapshotRequest"];
      };
    };
  };
  /** Get smes */
  getSmeById: {
    parameters: {
      path: {
        /** Smes id */
        smesId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["SmeResponse"];
        };
      };
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /** Create smes */
  updateSme: {
    parameters: {
      path: {
        /** Smes id */
        smesId: string;
      };
    };
    responses: {
      /** Update */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["SmeResponse"];
        };
      };
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Body to create smes */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["SmeRequest"];
      };
    };
  };
  /** Add role for smecustomer */
  addRoleToSmeCustomer: {
    parameters: {
      path: {
        /** Smes Id */
        smesId: string;
        /** Customer Id */
        customerId: string;
        /** Role name */
        "role-name": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["SmeCustomerRoleResponse"];
        };
      };
    };
  };
  /** Delete role for smecustomer */
  deleteRoleToSmeCustomer: {
    parameters: {
      path: {
        /** Smes Id */
        smesId: string;
        /** Customer Id */
        customerId: string;
        /** Role name */
        "role-name": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["SmeCustomerRoleResponse"];
        };
      };
    };
  };
  /** Get role for smecustomer */
  getRoleForSmeCustomer: {
    parameters: {
      path: {
        /** Smes Id */
        smesId: string;
        /** Customer Id */
        customerId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["SmeCustomerRoleResponse"];
        };
      };
    };
  };
  /** Links customer and sme */
  createEmployeeSme: {
    parameters: {
      path: {
        /** Smes Id */
        smesId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["SmeCustomerResponse"];
        };
      };
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Customer sme relation */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["SmeCustomerRequest"];
      };
    };
  };
  /** Create smes */
  getSme: {
    parameters: {
      query: {
        /** Smes brn */
        brn?: string;
        /** Smes name */
        name?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["SmesResponse"];
        };
      };
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /** Create smes */
  createSme: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["SmeResponse"];
        };
      };
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Body to create smes */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["SmeRequest"];
      };
    };
  };
  /** Create customer in SME */
  createCustomerForSme: {
    responses: {
      /** CREATED */
      201: {
        content: {
          "application/json": external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerCreatedRs"];
        };
      };
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Body to create customer */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["CreateSmeCustomerRequest"];
      };
    };
  };
  /** Add profile to existing sme */
  saveSmeProfiles: {
    parameters: {
      path: {
        /** Smes Id */
        smesId: string;
      };
    };
    responses: {
      /** Updated */
      200: unknown;
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Data of profiles */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["SmeProfilesRequest"];
      };
    };
  };
  /** Add address to existing sme */
  createSmeAddresses: {
    parameters: {
      path: {
        /** Smes Id */
        smesId: string;
      };
    };
    responses: {
      /** Created */
      200: unknown;
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Data of address */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["CreateSmeAddressesRequest"];
      };
    };
  };
  /** Update sme address of existing sme */
  upadeSmeAddress: {
    parameters: {
      path: {
        /** Smes Id */
        smesId: string;
      };
    };
    responses: {
      /** Updated */
      200: unknown;
      400: external["schemas/generic/errors.yaml"]["components"]["responses"]["BadRequest"];
      422: external["schemas/generic/errors.yaml"]["components"]["responses"]["UnprocessableEntity"];
      500: external["schemas/generic/errors.yaml"]["components"]["responses"]["InternalServerError"];
    };
    /** Data of address */
    requestBody: {
      content: {
        "application/json": external["schemas/request/requests.yaml"]["components"]["schemas"]["MailingAddressRequest"];
      };
    };
  };
}

export interface external {
  "schemas/generic/errors.yaml": {
    paths: {};
    components: {
      schemas: {
        /** Error message */
        Error: {
          /** @description Human readable, unique name of the error. */
          name: string;
          /** @description Message describing the error. */
          message: string;
          /** @description Error id to easy search in logs. */
          error_id: string;
        };
      };
      responses: {
        /** The specified resource was not found (404) */
        NotFound: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
        /** Found Error description (302) */
        Found: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
        /** BadRequest Error description (400) */
        BadRequest: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
        /** Unauthenticated Error description (401) */
        Unauthenticated: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
        /** Forbidden Error description (403) */
        Forbidden: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
        /** UnprocessableEntity Error description (422) */
        UnprocessableEntity: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
        /** UnprocessableEntity Error description (409) */
        AccountAlreadyExistExceptionEntity: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
        /** InternalServerError Error description (500) */
        InternalServerError: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
        /** BadGateway Error description (502) */
        BadGateway: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
        /** ServiceUnavailable Error description (503) */
        ServiceUnavailable: {
          content: {
            "application/json": external["schemas/generic/errors.yaml"]["components"]["schemas"]["Error"];
          };
        };
      };
    };
    operations: {};
  };
  "schemas/generic/genericTypes.yaml": {
    paths: {};
    components: {
      schemas: {
        /** @enum {string} */
        BumiputeraStatus:
          | "BUMIPUTERA_CONTROLLED"
          | "NON_BUMIPUTERA_CONTROLLED"
          | "NON_RESIDENT_CONTROLLED"
          | "GOVERNMENT_CONTROLLED";
        /** @enum {string} */
        CustomerType:
          | "BANK_STAFF"
          | "EXTERNAL_CUSTOMER"
          | "SME_DIRECTOR"
          | "SME_APPLICANT";
        /** @enum {string} */
        DeviceStatus:
          | "UNVERIFIED"
          | "ACTIVE_UNVERIFIED"
          | "ACTIVE_VERIFIED"
          | "INACTIVE_VERIFIED";
        /** @enum {string} */
        CustomerStatusType:
          | "ELIGIBILITY"
          | "IDENTITY_VERIFICATION"
          | "CRR"
          | "CBS";
        /** @enum {string} */
        CustomerStatusValue:
          | "NOT_INITIATED"
          | "INITIATED"
          | "PASSED"
          | "FAILED";
        /** @enum {string} */
        CustomerOverallStatus:
          | "ONBOARDED"
          | "ACTIVE"
          | "FAILED"
          | "PROSPECT"
          | "ARCHIVED"
          | "OFFBOARDING_PENDING"
          | "OFFBOARDED";
        /** @enum {string} */
        CustomerDepositAccountStatus: "ACTIVE" | "INACTIVE";
        /** @enum {string} */
        AccountStatus:
          | "INITIATED"
          | "INITIALISATION_FAILURE"
          | "INACTIVE"
          | "ACTIVE"
          | "DORMANT"
          | "BLOCKED"
          | "PENDING_CLOSURE"
          | "CLOSED";
        /** Customer account */
        Account: {
          /** @description ID of the account */
          accountId: string;
          /** @description Account number which allows for funds transfer to/from this account */
          accountNumber: string;
          status: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["AccountStatus"];
        };
        /** Customer mobile preferences */
        MobilePreferences: {
          /**
           * @description Push notifications allowed
           * @example true
           */
          pushNotificationsAllowed?: boolean;
          /**
           * @description Marketing with email consent
           * @example true
           */
          marketingEmailFlag?: boolean;
          /**
           * @description Marketing with phone call consent
           * @example true
           */
          marketingPhoneCallFlag?: boolean;
          /**
           * @description Marketing with sms consent
           * @example true
           */
          marketingSmsFlag?: boolean;
          /**
           * @description Marketing with Push notifications consent
           * @example true
           */
          marketingPushFlag?: boolean;
        };
        /** Sme profiles */
        SmeProfiles: {
          /**
           * @description Number of employees of sme
           * @example 5
           */
          noOfEmployees: string;
          /**
           * @description Annual sales turnover of sme
           * @example 10000
           */
          annualSalesTurnover: string;
          /** @description Bumiputera status of smes profile */
          bumiputeraStatus?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["BumiputeraStatus"];
          businessActivitiesCountries: string[];
          countriesOfSupplier: string[];
          /**
           * @description Email of sme
           * @example bussinessEmail123@email.mys
           */
          businessEmailAddress: string;
          /**
           * @description Description
           * @example Some description
           */
          description?: string;
        };
        /** Customer mobile profiles */
        Profiles: {
          /**
           * @description Customer's marital status
           * @example true
           */
          maritalStatus?: string;
          /**
           * @description Customer's ethnicity
           * @example true
           */
          ethnicity?: string;
          /** @description Account setting up reasons */
          accountSettingUpReasons?: string[];
          /**
           * @description BNM CCC of customer profile
           * @example Individual Bumi
           */
          bnmCcc?: string;
          /**
           * @description Residency status of customer profile
           * @example U
           */
          residencyStatus?: string;
          /**
           * Format: int64
           * @description Entity type of customer profile
           * @example 11
           */
          entityType?: number;
          /**
           * @description Declared religion of the customer
           * @example Islam
           */
          religion?: string;
        };
        /** SmeCustomer role */
        SmeCustomerRole: {
          /** @description SmeCustomer role name */
          name?: string;
          /** @description SmeCustomer role displayName */
          displayName?: string;
        };
        /** Customer's device */
        Device: {
          /**
           * @description Device id
           * @example 1635944521024644
           */
          deviceId?: string;
          /**
           * Format: date-time
           * @description Creation date time
           * @example 2021-10-15T18:00:00
           */
          createdAt?: string;
          /**
           * Format: date-time
           * @description Last update date time
           * @example 2021-10-15T18:00:00
           */
          updatedAt?: string;
          /**
           * @description Device operation system
           * @example iOS 14
           */
          deviceOs?: string;
          /**
           * @description Device made and model
           * @example iPhone X
           */
          deviceModel?: string;
          /**
           * @description Device installation id
           * @example a346d8d9-84a0-401f-84bd-233dcf83c4bb
           */
          deviceInstallationId?: string;
          /**
           * @description Device status
           * @example active
           */
          deviceStatus?: string;
        };
        /** Document id */
        DocumentId: {
          /**
           * Format: int64
           * @description Document id
           * @example 1
           */
          document_id: number;
        };
        /** Document */
        Document: {
          /**
           * Format: int64
           * @description Document id
           * @example 1
           */
          id?: number;
          /** @description Document url */
          url?: string;
          /**
           * @description Document title
           * @example Agency Appointment Clause
           */
          title?: string;
          /**
           * @description Document version
           * @example 1
           */
          version?: number;
          /**
           * @description Document type
           * @example privacy-policy
           */
          type?: string;
          /**
           * Format: date-time
           * @description Creation date time
           * @example 2021-10-15T18:00:00
           */
          createdOn?: string;
          /**
           * Format: date-time
           * @description Modification date time
           * @example 2021-10-15T18:00:00
           */
          lastUpdated?: string;
        };
        /** Document acceptance */
        AcceptedDocument: {
          /**
           * Format: int64
           * @description Document acceptance id
           * @example 1
           */
          acceptedDocumentId?: number;
          /**
           * Format: date-time
           * @example 2021-10-15T18:00:00
           */
          acceptedDocumentDate?: string;
          document?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Document"];
        };
        /** Identity and access management */
        Iam: {
          /**
           * @description Customer's username
           * @example username
           */
          username?: string;
          /**
           * @description Customer's ping one id
           * @example 123
           */
          pingOneId?: string;
        };
        /** Customer's address data */
        Address: {
          /**
           * Format: int64
           * @description Address id
           * @example 1
           */
          id?: number;
          /**
           * @description Line 1 of address
           * @example Baker street
           */
          line1?: string;
          /**
           * @description Line 2 of address
           * @example 1
           */
          line2?: string;
          /**
           * @description Line 3 of address
           * @example 2/3
           */
          line3?: string;
          /**
           * @description Line 4 of address
           * @example 1
           */
          line4?: string;
          /**
           * @description Line 5 of address
           * @example 1
           */
          line5?: string;
          /**
           * @description Country code
           * @example MYS
           */
          countryCode: string;
          /**
           * @description City
           * @example Kuala Lumpur
           */
          city: string;
          /**
           * @description Postal code
           * @example 12345
           */
          postalCode: string;
          /**
           * @description Subdivision
           * @example North region
           */
          subdivision: string;
          /**
           * @description Address type
           * @enum {string}
           */
          type: "RESIDENTIAL" | "MAILING";
        };
      };
    };
    operations: {};
  };
  "schemas/request/requests.yaml": {
    paths: {};
    components: {
      schemas: {
        /** Sme customer data */
        CreateSmeCustomerRequest: {
          /**
           * Format: uuid
           * @description Id of new created user
           */
          customerId?: string;
          /**
           * @description Email of new created user
           * @example foobar@bar.com
           */
          email?: string;
          /**
           * @description Customer's phone number
           * @example +60 123 123 132
           */
          phoneNumber?: string;
          /** @description Device data */
          device?: external["schemas/request/requests.yaml"]["components"]["schemas"]["SmeCustomerDeviceRequest"];
          /** @description Customer type */
          customerType: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["CustomerType"];
        };
        /** Device data */
        SmeCustomerDeviceRequest: {
          /**
           * @description Device operation system
           * @example iOS 14
           */
          deviceOs: string;
          /**
           * @description Device made and model
           * @example iPhone X
           */
          deviceModel: string;
          /**
           * @description Device installation id
           * @example a346d8d9-84a0-401f-84bd-233dcf83c4bb
           */
          deviceInstallationId: string;
          /** @description Device initial status */
          deviceStatus: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["DeviceStatus"];
        };
        /** Smes body request */
        SmeRequest: {
          /**
           * @description SMES ID
           * @example 1234567890
           */
          smeId?: string;
          /** @description BRN ID */
          brn: string;
          /** @description Name of smes */
          name: string;
          /** @description Local name of smes */
          localName?: string;
          /** @description Abbreviation of smes */
          abbreviation?: string;
          /** @description Country code of smes */
          countryCode: string;
          /** @description Country subdivision code of smes */
          countrySubdivisionCode?: string;
          /**
           * @description Business type of smes
           * @enum {string}
           */
          businessType:
            | "PRIVATE_LIMITED_COMPANY"
            | "SOLE_PROPRIETORSHIP"
            | "PARTNERSHIP";
        };
        /** Customer sme request */
        SmeCustomerRequest: {
          /**
           * Format: uuid
           * @description Customer id to link sme
           */
          customerId: string;
          customerRoles: string[];
        };
        /** Customer statuses request */
        ManualSnapshotRequest: {
          /** @description Customer's ids to send snapshot */
          customers: string[];
        };
        /** Email update request */
        CustomerUpdateRequest: {
          /**
           * @description Email to update
           * @example newbetteremail@op.pl
           */
          email?: string;
          /**
           * @description Nickname to update
           * @example gerwazy997
           */
          nickname?: string;
        };
        /** Customer mailing address update request */
        MailingAddressRequest: {
          address?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Address"];
          /**
           * @description Customer has same mailing address as residence
           * @example true
           */
          mailingSameAsResidence?: boolean;
        };
        /** Create addresses for smes */
        CreateSmeAddressesRequest: {
          /**
           * @description Customer has same mailing address as residence
           * @example true
           */
          mailingSameAsResidence: boolean;
          addressses: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Address"][];
        };
        /** Customer statuses request */
        CustomerStatusRequest: {
          statusType: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["CustomerStatusType"];
          statusValue: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["CustomerStatusValue"];
          /**
           * @description Comment
           * @example Test change
           */
          comment?: string;
        };
        /** Customer statuses request */
        CustomerStatusesRequest: external["schemas/request/requests.yaml"]["components"]["schemas"]["CustomerStatusRequest"][];
        /** Mobile preferences updates */
        CustomerMobilePreferencesRequest: {
          updates?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["MobilePreferences"];
        };
        /** Profiles updates */
        CustomerProfilesRequest: {
          updates?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Profiles"];
        };
        /** Sme profiles updates */
        SmeProfilesRequest: {
          /** @description Sme profiles */
          updates: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["SmeProfiles"];
        };
        /** Basic customer data */
        CreateCustomerRequest: {
          /**
           * @description Customer's phone number
           * @example +60 123 123 132
           */
          phoneNumber: string;
          /**
           * @description Device operation system
           * @example iOS 14
           */
          deviceOs: string;
          /**
           * @description Device made and model
           * @example iPhone X
           */
          deviceModel: string;
          /**
           * @description Device installation id
           * @example a346d8d9-84a0-401f-84bd-233dcf83c4bb
           */
          deviceInstallationId: string;
          /**
           * @description Device initial status
           * @example ACTIVE
           */
          deviceStatus: string;
          customerStatuses: external["schemas/request/requests.yaml"]["components"]["schemas"]["CustomerStatusesRequest"];
        };
        /** Basic customer data */
        IdentityVerificationRequest: {
          /** @example 533f307b-1af7-4ab9-9a2f-62d657bacf49 */
          identityReferenceId: string;
        };
        /** Customer's employment creation data */
        CustomerEmploymentDataRequest: {
          /**
           * @description Customer's employer
           * @example GFT
           */
          employer?: string;
          /**
           * @description Employment type
           * @example contract
           */
          employmentType: string;
          /**
           * @description Employment sector
           * @example financial
           */
          employmentSector?: string;
          /**
           * @description Customer's occupation
           * @example manager
           */
          occupation?: string;
          /**
           * @description Customer's annual income bracket
           * @example 10.000-50.000
           */
          annualIncomeBracket?: string;
        };
        /** documents ids */
        AcceptedDocumentsRequest: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["DocumentId"][];
        /** Device data */
        DeviceRequest: {
          /**
           * @description Device operation system
           * @example iOS 14
           */
          deviceOs: string;
          /**
           * @description Device made and model
           * @example iPhone X
           */
          deviceModel: string;
          /**
           * @description Device installation id
           * @example a346d8d9-84a0-401f-84bd-233dcf83c4bb
           */
          deviceInstallationId: string;
        };
      };
    };
    operations: {};
  };
  "schemas/response/responses.yaml": {
    paths: {};
    components: {
      schemas: {
        /** Customer creation response */
        CustomerCreatedRs: {
          /**
           * @description Id of new created user
           * @example 1635944521024644
           */
          id?: string;
        };
        /** Customer status */
        CustomerStatuses: {
          eligibility: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["CustomerStatusValue"];
          identityVerifiaction: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["CustomerStatusValue"];
          crr: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["CustomerStatusValue"];
          cbs: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["CustomerStatusValue"];
          depositAccounts: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["CustomerDepositAccountStatus"];
          overall: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["CustomerOverallStatus"];
        };
        /** Customers details */
        CustomersDetailsRs: external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerDetailsRs"][];
        /** Customer financing data */
        CustomerFinancingDataResponse: {
          /**
           * Format: uuid
           * @description Customer id
           */
          customerId?: string;
          /**
           * @description Customer first name
           * @example Ashwin
           */
          firstName?: string;
          /**
           * @description Customer last name
           * @example Sharma
           */
          lastName?: string;
          /**
           * @description Customer's phone number
           * @example +1 123 123 132
           */
          phoneNumber?: string;
          /**
           * @description Customer's email
           * @example foo@bar.com
           */
          email?: string;
          /**
           * @description Customer's NRIC
           * @example 510317-10-5821
           */
          nric?: string;
          /** @description Customer's identity verifications */
          identityVerifications?: external["schemas/response/responses.yaml"]["components"]["schemas"]["IdentityVerificationResponse"][];
          /** @description Customer's employments */
          employments?: external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerEmploymentDataResponse"][];
          profiles?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Profiles"];
          /**
           * @description Customer's date of birth
           * @example 09-01-1998
           */
          dateOfBirth?: string;
          /**
           * @description Customer's gender
           * @example M
           */
          gender?: string;
          /**
           * @description Customer's nationality
           * @example MYS
           */
          nationality?: string;
          /**
           * @description Information if mailing address is same as residence
           * @example false
           */
          mailingAddressSameAsResidence?: boolean;
          /** @description Customer's addresses */
          addresses?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Address"][];
        };
        /** Customer details */
        CustomerDetailsRs: {
          /**
           * Format: uuid
           * @description Customer id
           */
          customerId?: string;
          /**
           * Format: date-time
           * @description Creation date time
           * @example 2021-10-15T18:00:00
           */
          createdAt?: string;
          /**
           * Format: date-time
           * @description Last update date time
           * @example 2021-10-15T18:00:00
           */
          updatedAt?: string;
          /**
           * @description Customer first name
           * @example Ashwin
           */
          firstName?: string;
          /**
           * @description Customer last name
           * @example Sharma
           */
          lastName?: string;
          /**
           * @description Customer's nickname
           * @example John
           */
          nickname?: string;
          /**
           * @description Customer's phone number
           * @example +1 123 123 132
           */
          phoneNumber?: string;
          /**
           * @description Customer's email
           * @example foo@bar.com
           */
          email?: string;
          /**
           * @description Customer's NRIC
           * @example 510317-10-5821
           */
          nric?: string;
          /** @description Customer account statuses */
          statuses?: external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerStatuses"];
          /**
           * @description Customer type
           * @example EXTERNAL_CUSTOMER
           */
          type?: string;
          mobilePreferences?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["MobilePreferences"];
          /** @description Customer's devices */
          devices?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Device"][];
          /** @description Customer's accounts */
          accounts?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Account"][];
          /** @description Customer's identity verifications */
          "identity-verifications"?: external["schemas/response/responses.yaml"]["components"]["schemas"]["IdentityVerificationResponse"][];
          /** @description Customer's employments */
          employments?: external["schemas/response/responses.yaml"]["components"]["schemas"]["CustomerEmploymentDataResponse"][];
          profiles?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Profiles"];
          /** @description Details of accepted documents */
          acceptedDocuments?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["AcceptedDocument"][];
          /**
           * @description Customer date of birth
           * @example 09-01-1998
           */
          date_of_birth?: string;
          /**
           * @description Customer place of Birty
           * @example MYS
           */
          place_of_birth?: string;
          /**
           * @description Customer gender
           * @example M
           */
          gender?: string;
          /**
           * @description Nationality of customer
           * @example MYS
           */
          nationality?: string;
          /**
           * @description Customer has retail account
           * @example false
           */
          hasRetailAccount?: boolean;
          /**
           * @description Customer has sme account
           * @example false
           */
          hasSmeAccount?: boolean;
          /** @description Customer's smes */
          smes?: external["schemas/response/responses.yaml"]["components"]["schemas"]["SmeCustomerResponse"][];
          /**
           * @description Customer mailing address is the same as residence
           * @example false
           */
          mailingAddressSameAsResidence?: boolean;
          /** @description Customer addresses */
          addresses?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Address"][];
          iam?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Iam"];
        };
        /** Identity verification request */
        IdentityVerificationResponse: {
          /** @example 533f307b-1af7-4ab9-9a2f-62d657bacf49 */
          identityReferenceId: string;
          /**
           * Format: date-time
           * @example 2021-10-15T18:00:00
           */
          startVerificationDate: string;
          /** @example PENDING */
          status: string;
          /** @example ID_CARD */
          documentType?: string;
          /** @example VISA */
          documentSubtype?: string;
          /** @example MYS */
          documentCountry?: string;
        };
        /** Customer's employment creation data */
        CustomerEmploymentDataResponse: {
          /**
           * Format: int64
           * @description Customer's employment id
           * @example 1
           */
          id?: number;
          /**
           * @description Customer's employer
           * @example GFT
           */
          employer?: string;
          /**
           * @description Employment type
           * @example contract
           */
          employmentType: string;
          /**
           * @description Employment sector
           * @example financial
           */
          employmentSector?: string;
          /**
           * @description Customer's occupation
           * @example manager
           */
          occupation?: string;
          /**
           * @description Customer's annual income bracket
           * @example 10.000-50.000
           */
          annualIncomeBracket?: string;
        };
        /** Problem */
        Problem: {
          /**
           * Format: uri
           * @description URI that identifies the problem type with human-readable info.
           * @example Technical Error
           */
          type?: string;
          /**
           * @description A short summary of the problem type. Readable for engineers
           * @example Service Unavailable
           */
          title?: string;
          /**
           * @description The HTTP status code generated by the origin server
           * @example 503
           */
          status?: string;
          /**
           * @description A human readable explanation specific to this occurrence
           * @example Connection to database timed out
           */
          detail?: string;
          /**
           * Format: uri
           * @description An absolute URI that identifies the specific occurrence of the problem.
           */
          instance?: string;
        };
        /** Devices details */
        DevicesResponse: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Device"][];
        /** Response in sme roles */
        SmeCustomerRoleResponse: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["SmeCustomerRole"][];
        /** Customer details for framl-data */
        CustomerFramlDetailsRs: {
          /**
           * @description Customer full name
           * @example Muhammad Ali
           */
          fullName?: string;
          /**
           * @description Creation date time
           * @example 1998-01-09
           */
          dateOfBirth?: string;
          /**
           * @description Customer place of birth
           * @example 70
           */
          placeOfBirth?: string;
          /** @description Customer nationality */
          nationality?: string;
          /** @example MYS */
          addressCountry?: string;
          /** @example MYS */
          nonResidentCountry?: string;
          mailingAddressCountry?: string;
          IDOrPassportissueCountry?: string;
          /** @example MYS */
          employerCountry?: string;
          /** @example Individual */
          individualType?: string;
          /** @example Saving Account */
          productServices?: string;
          /** @example Mobile Banking */
          distributionChannel?: string;
          /** @example Boxer */
          occupation?: string;
        };
        /** Customer address */
        IdAddress: {
          line1?: string;
          line2?: string;
          line3?: string;
          line4?: string;
          line5?: string;
          /** @example MYS */
          country?: string;
          postalCode?: string;
          city?: string;
          subvision?: string;
          formattedAddress?: string;
        };
        /** Response with smes */
        SmeResponse: {
          smeId: string;
          brn: string;
          name?: string;
          localName?: string;
          abbreviation?: string;
          bussinessType?: string;
          countryCode: string;
          countrySubdivisionCode?: string;
          /** Sme addresses */
          addresses?: external["schemas/generic/genericTypes.yaml"]["components"]["schemas"]["Address"][];
        } & {
          nam: unknown;
        };
        /** Customers details */
        SmesResponse: external["schemas/response/responses.yaml"]["components"]["schemas"]["SmeResponse"][];
        /** Response with customer sme */
        SmeCustomerResponse: {
          /** Format: uuid */
          customerId: string;
          smeId?: string;
          customerRoles: string[];
        };
      };
    };
    operations: {};
  };
}
