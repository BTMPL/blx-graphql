openapi: 3.0.3

info:
  title: Customer service API
  version: 1.0.0
  description: API allow performing operations related to CRM

tags:
  - name: CustomerService
    description: Operations related to Customer

servers:
  - url: http://localhost:8080/customer-service/
    description: local server

paths:
  /v1/customers/{customerId}/personal-financing-data:
    get:
      tags:
        - personal financing data
      summary: Get personal financing data
      description: Get personal financing data
      operationId: getPersonalFinancingData
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: "1635944521024644"
          required: true
          description: "Customer id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/PersonalFinancingDataRs'
        '404':
          description: Not Found




  /v1/customers/{customerId}/trigger-phonenumber-change:
    post:
      tags:
        - change phonenumber
      summary: Trigger change number for retail customer
      description: Trigger change number for retail customer
      operationId: triggerChangeNumber
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: "1635944521024644"
          required: true
          description: "Customer Id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/ChangePhonenumberRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/ChangeNumberRs'
        '404':
          description: Not Found

  /v1/customers/{customerId}:
    get:
      tags:
        - customers
      summary: Get customer data
      description: Get customer data
      operationId: getCustomer
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/CustomerDetailsRs'
        '404':
          description: Not Found

    patch:
      tags:
        - customers
      summary: Edit customers data
      description: Edit customers data
      operationId: editCustomersParameters
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/CustomerUpdateRequest'
      responses:
        '200':
          description: Updated
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v1/customers:
    post:
      tags:
        - customers
      summary: Creates a new customer
      description: Creates customer
      operationId: createCustomer
      requestBody:
        description: Data of the customer to be created
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Created
          content:
            "application/json;version=1":
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/CustomerCreatedRs'
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '409':
          $ref: './schemas/generic/errors.yaml#/components/responses/AccountAlreadyExistExceptionEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'
    get:
      tags:
        - customers
      summary: Get customers data
      description: Get customers data. At least one query parameter is required.
      operationId: getCustomers
      parameters:
        - in: query
          name: phoneNumber
          schema:
            type: string
            minLength: 8
            maxLength: 18
          example: '+80 123 123 123'
          required: false
          description: "Customer's phone number"
        - in: query
          name: nric
          schema:
            type: string
            minLength: 8
            maxLength: 16
          example: '550106-12-5821'
          required: false
          description: "Customer's NRIC"
        - in: query
          name: username
          schema:
            type: string
          example: 'JohnFoo'
          required: false
          description: "Customer's username"
        - in: query
          name: email
          schema:
            type: string
          example: 'john@foo.com'
          required: false
          description: "Customer's email"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/CustomersDetailsRs'
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'

  /v1/customers/all:
    get:
      tags:
        - customers
      summary: Get all customers data
      description: Get all customers data.
      operationId: getCustomersPage
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            format: int32
            default: 0
          example: '0'
          required: true
          description: "Page starting from 0. Default 0"
        - in: query
          name: size
          schema:
            type: integer
            format: int32
            default: 10
          example: '10'
          required: true
          description: "Page size. Default 10"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/CustomersDetailsPageRs'
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'


  /v1/customers/{customerId}/mobile-preferences:
    get:
      tags:
        - customers
      summary: Get customer mobile preferences
      description: Get customer mobile preferences
      operationId: getCustomerMobilePrefs
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/generic/genericTypes.yaml#/components/schemas/MobilePreferences'
        '404':
          description: Not Found
    patch:
      tags:
        - customers
      summary: Add customer mobile preferences
      description: Add mobile preferences to existing user
      operationId: saveMobilePreferences
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      requestBody:
        description: Data of the mobile preferences
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/CustomerMobilePreferencesRequest'
      responses:
        '200':
          description: Updated
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v1/customers/{customerId}/employments/{employmentId}:
    patch:
      tags:
        - customers
      summary: Update employments
      description: Update employments
      operationId: updateEmployment
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: "1692829382363171"
          required: true
        - in: path
          name: employmentId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: Employment data
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/CustomerEmploymentUpdateRequest'
      responses:
        '200':
          description: Created
        '404':
          description: Not Found
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v1/customers/{customerId}/employments:
    get:
      tags:
        - customers
      summary: Get customer employments
      description: Get customer employments
      operationId: getCustomerEmployments
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/response/responses.yaml#/components/schemas/CustomerEmploymentDataResponse'
        '404':
          description: Not Found
    post:
      tags:
        - customers
      summary: Add customer employment
      description: Add employment data to existing user
      operationId: saveEmploymentData
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      requestBody:
        description: Employment data
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/CustomerEmploymentDataRequest'
      responses:
        '201':
          description: Created
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v1/customers/{customerId}/identity-verifications:
    post:
      tags:
        - customers
      summary: Create new identity verification
      description: Assign new identity verification to customer
      operationId: createIdentityVerification
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      requestBody:
        description: Data of the customer to be created
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/IdentityVerificationRequest'
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /v1/customers/{customerId}/profiles:
    get:
      tags:
        - customers
      summary: Get customer's profiles
      description: Get customer's profiles
      operationId: getCustomerProfiles
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/generic/genericTypes.yaml#/components/schemas/Profiles'
        '404':
          description: Not Found
    patch:
      tags:
        - customers
      summary: Add customer profiles
      description: Add profiles to existing user
      operationId: saveProfiles
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      requestBody:
        description: Data of profiles
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/CustomerProfilesRequest'
      responses:
        '200':
          description: Updated
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v1/customers/{customerId}/status:
    get:
      tags:
        - customers
      summary: Get customer statuses
      description: Get status for existing customer
      operationId: getStatuses
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/CustomerStatuses'
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v1/customers/{customerId}/accepted-documents:
    post:
      tags:
        - customers
      summary: Create new document acceptance
      description: Accept customer's documents
      operationId: createAcceptedDocuments
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
          required: true
          description: Unique parameter to satisfy idempotency
      requestBody:
        description: Documents acceptances of the customer to be created
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/AcceptedDocumentsRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found

  /v1/customers/{customerId}/devices:
    post:
      tags:
        - customers
      summary: Create new device
      description: Create new device for customer
      operationId: createDevice
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
          required: true
          description: Unique parameter to satisfy idempotency
      requestBody:
        description: Data of the customer's device to be created
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/DeviceRequest'
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
    get:
      tags:
        - customers
      summary: Get customer's devices
      description: Get customer's devices
      operationId: getCustomerDevices
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
        - in: query
          name: status
          schema:
            type: string
          example: 'ACTIVE_VERIFIED'
          required: false
          description: "Devices expected status"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/DevicesResponse'
        '404':
          description: Not Found
  /v1/customers/{customerId}/framl-data:
    get:
      tags:
        - customers
      summary: Get customer data
      description: Get customer data
      operationId: getCustomerFramlData
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          example: '1635944521024644'
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/CustomerFramlDetailsRs'
        '404':
          description: Not Found

  /v1/customers/{customerId}/addresses:
    get:
      tags:
        - customers
      summary: Get customer addresses
      description: Get customer addresses
      operationId: getCustomerAddresses
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/generic/genericTypes.yaml#/components/schemas/Address'
        '404':
          description: Not Found
    patch:
      tags:
        - customers
      summary: Update customer mailing address
      description: Update mailing address data to existing user
      operationId: changeMailingAddress
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          required: true
          description: "Customer Id"
      requestBody:
        description: Mailing address body
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/MailingAddressRequest'
      responses:
        '201':
          description: Created
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v1/customers/{customerId}/accounts:
    get:
      tags:
        - customers
      summary: Get customer accounts
      description: Get customer accounts
      operationId: getCustomerAccounts
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/generic/genericTypes.yaml#/components/schemas/Account'
        '404':
          description: Not Found
    post:
      tags:
        - customers
      summary: Add customer account
      description: Add account data to existing user
      operationId: saveAccount
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          required: true
          description: "Customer Id"
      requestBody:
        description: Account data
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/generic/genericTypes.yaml#/components/schemas/Account'
      responses:
        '201':
          description: Created
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v1/customers/{customerId}/financing-data:
    get:
      tags:
        - customers
      summary: Get financing-data
      description: Get financing-data of customer with customerId
      operationId: getCustomerFinancingData
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/CustomerFinancingDataResponse'
        '404':
          description: "Customer not found"

  /v1/customers/snapshot:
    post:
      tags:
        - customers
      summary: Send customers snapshots
      description: Send snapshots
      operationId: sendSnapshots
      requestBody:
        description: Issued customers
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/ManualSnapshotRequest'
      responses:
        '200':
          description: Sended
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v2/smes/{smesId}:
    get:
      tags:
        - smes
      summary: Get smes
      description: Get smes
      operationId: getSmeById
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/SmeResponse'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'
    put:
      tags:
        - smes
      summary: Update smes
      description: Create smes
      operationId: updateSme
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes id"
      requestBody:
        description: Body to create smes
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/SmeRequest'
      responses:
        '200':
          description: Update
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/SmeResponse'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v2/smes/{smesId}/employees/{customerId}/roles/{role-name}:
    post:
      tags:
        - smecustomer roles
      summary: Add role for smecustomer
      description: Add role for smecustomer
      operationId: addRoleToSmeCustomer
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes Id"
        - in: path
          name: customerId
          schema:
            type: string
          required: true
          description: "Customer Id"
        - in: path
          name: role-name
          schema:
            type: string
          example: "INDIVIDUAL_OWNERS"
          required: true
          description: "Role name"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/SmeCustomerRoleResponse'
    delete:
      tags:
        - smecustomer roles
      summary: Delete role for smecustomer
      description: Delete role for smecustomer
      operationId: deleteRoleToSmeCustomer
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes Id"
        - in: path
          name: customerId
          schema:
            type: string
          required: true
          description: "Customer Id"
        - in: path
          name: role-name
          schema:
            type: string
          example: "INDIVIDUAL_OWNERS"
          required: true
          description: "Role name"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/SmeCustomerRoleResponse'


  /v2/smes/{smesId}/employees/{customerId}/roles:
    get:
      tags:
        - smecustomer roles
      summary: Get role for smecustomer
      description: Get role for smecustomer
      operationId: getRoleForSmeCustomer
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes Id"
        - in: path
          name: customerId
          schema:
            type: string
          required: true
          description: "Customer Id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/SmeCustomerRoleResponse'



  /v2/smes/{smesId}/employees:
    post:
      tags:
        - smes
      summary: Post sme employee
      description: Links customer and sme
      operationId: createEmployeeSme
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes Id"
      requestBody:
        description: Customer sme relation
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/SmeCustomerRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/SmeCustomerResponse'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v2/smes:
    post:
      tags:
        - smes
      summary: Create smes
      description: Create smes
      operationId: createSme
      requestBody:
        description: Body to create smes
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/SmeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/SmeResponse'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'
    get:
      tags:
        - sme
      summary: Get smes with specific brn or name
      description: Create smes
      operationId: getSme
      parameters:
        - in: query
          name: brn
          schema:
            type: string
          example: '123'
          required: false
          description: "Smes brn"
        - in: query
          name: name
          schema:
            type: string
          example: 'name'
          required: false
          description: "Smes name"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/SmesResponse'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v2/customers/{customerId}/smes:
    get:
      tags:
        - smecustomers
      summary: Get all smes related to customer
      description: Get all smes related to customer with specific id
      operationId: getSmesByCustomerId
      parameters:
        - in: path
          name: customerId
          schema:
            type: string
          required: true
          description: "Customer id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/CustomerSmesRs'

  /v2/smes/{smeId}/customers:
    get:
      tags:
        - smecustomers
      summary: Get all customers related to sme
      description: Get all customers related to smes with specific id
      operationId: getCustomersBySmeId
      parameters:
        - in: path
          name: smeId
          schema:
            type: string
            format: uuid
          required: true
          description: "Sme id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/SmesCustomerRs'


  /v2/customers:
    post:
      tags:
        - customers
      summary: Create customer in SME
      description: Create customer in SME
      operationId: createCustomerForSme
      requestBody:
        description: Body to create customer
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/CreateSmeCustomerRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: './schemas/response/responses.yaml#/components/schemas/CustomerCreatedRs'
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v2/smes/{smesId}/profiles:
    get:
      tags:
        - smes
      summary: Get sme profiles
      description: Get profile for existing sme
      operationId: getSmeProfiles
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes Id"
      responses:
        '200':
          description: Returned
          content:
            application/json:
              schema:
                $ref: './schemas/generic/genericTypes.yaml#/components/schemas/SmeProfiles'
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'
    post:
      tags:
        - smes
      summary: Add sme profiles
      description: Add profile to existing sme
      operationId: saveSmeProfiles
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes Id"
      requestBody:
        description: Data of profiles
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/generic/genericTypes.yaml#/components/schemas/SmeProfiles'
      responses:
        '201':
          description: Created
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'
    patch:
      tags:
        - smes
      summary: Update sme profiles
      description: Update profile in existing sme
      operationId: updateSmeProfiles
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes Id"
      requestBody:
        description: Data of profiles
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/SmeProfilesUpdateRequest'
      responses:
        '200':
          description: Updated
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'

  /v2/smes/{smesId}/addresses:
    patch:
      tags:
        - smes
      summary: Update sme address
      description: Update sme address of existing sme
      operationId: upadeSmeAddress
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes Id"
      requestBody:
        description: Data of address
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/MailingAddressRequest'
      responses:
        '200':
          description: Updated
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'
    post:
      tags:
        - smes
      summary: Add sme address
      description: Add address to existing sme
      operationId: createSmeAddresses
      parameters:
        - in: path
          name: smesId
          schema:
            type: string
            format: uuid
          required: true
          description: "Smes Id"
      requestBody:
        description: Data of address
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/request/requests.yaml#/components/schemas/CreateSmeAddressesRequest'
      responses:
        '200':
          description: Created
        '400':
          $ref: './schemas/generic/errors.yaml#/components/responses/BadRequest'
        '422':
          $ref: './schemas/generic/errors.yaml#/components/responses/UnprocessableEntity'
        '500':
          $ref: './schemas/generic/errors.yaml#/components/responses/InternalServerError'
